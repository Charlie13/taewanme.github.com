<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>numpy on taewan.kim 블로그</title>
    <link>http://taewan.kim/tags/numpy/</link>
    <description>Recent content in numpy on taewan.kim 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Aug 2018 23:28:14 +0900</lastBuildDate>
    
	<atom:link href="http://taewan.kim/tags/numpy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>다차원 텐서 Transpose와 Reshape</title>
      <link>http://taewan.kim/post/transpose_reshape/</link>
      <pubDate>Wed, 22 Aug 2018 23:28:14 +0900</pubDate>
      
      <guid>http://taewan.kim/post/transpose_reshape/</guid>
      <description>CNN과 같은 이미지 데이터를 다룰 때 입력 데이터로 4차원 텐서를 다룹니다. 이 4차원 데이터는 (image 수, channel 수, Height , Width)와 같은 구조를 갖습니다. 데이터를 전처리하는 과정에서 Channel First인 텐서를 Channel Last 텐서로 변형해야 하는 상황이 발생했습니다. 처음에 4차원 구조는 상상하기도 어려운데 4차원 텐서를 전치하라는 것은 어떤 의미인지 난감했습니다.
문제의 시작: Channel First를 Channel Last로 변환 파이토치로 CIFAR10 데이터셋을 읽어와서 대상 이미지를 Mathplotlib의 plt.imshow() 함수로 출력하는 작업을 진행했습니다.
# 변환기 파이프라인  transform = transforms.</description>
    </item>
    
    <item>
      <title>파이썬 데이터 사이언스 Cheat Sheet: NumPy 기초, 기본</title>
      <link>http://taewan.kim/post/numpy_cheat_sheet/</link>
      <pubDate>Tue, 16 Jan 2018 21:28:14 +0900</pubDate>
      
      <guid>http://taewan.kim/post/numpy_cheat_sheet/</guid>
      <description>파이썬 기반 데이터 분석 환경에서 NumPy1는 행렬 연산을 위한 핵심 라이브러리입니다. NumPy는 &amp;ldquo;Numerical Python&amp;ldquo;의 약자로 대규모 다차원 배열과 행렬 연산에 필요한 다양한 함수를 제공합니다. 특히 메모리 버퍼에 배열 데이터를 저장하고 처리하는 효율적인 인터페이스를 제공합니다. 파이썬 list 객체를 개선한 NumPy의 ndarray 객체를 사용하면 더 많은 데이터를 더 빠르게 처리할 수 있습니다.
NumPy는 다음과 같은 특징을 갖습니다.
 강력한 N 차원 배열 객체 정교한 브로드케스팅(Broadcast) 기능 C/C ++ 및 포트란 코드 통합 도구 유용한 선형 대수학, 푸리에 변환 및 난수 기능 범용적 데이터 처리에 사용 가능한 다차원 컨테이너  본 문서는 cs231n 강좌의 Python Numpy Tutorial 문서와 DataCamp의 Python For Data Science Cheat Sheet NumPy Basics 문서를 참조하여 작성하였습니다.</description>
    </item>
    
    <item>
      <title>Numpy에서 np.sum 함수의 axis 이해</title>
      <link>http://taewan.kim/post/numpy_sum_axis/</link>
      <pubDate>Sun, 17 Sep 2017 21:28:14 +0900</pubDate>
      
      <guid>http://taewan.kim/post/numpy_sum_axis/</guid>
      <description>통계 및 데이터 분석, 딥러닝을 하다 보면 스칼라, 벡터, 행렬, 텐서와 같은 다양한 데이터 유형을 다루게 됩니다. 데이터 분석은 여러 유형의 데이터 합을 구하고 빈도수와 확률을 계산하는 반복적인 작업입니다. 다양한 데이터를 대상으로 선형대수(Linear Algebra) 연산에 numpy의 sum 함수을 사용하면 매우 편리합니다. 그러나 처음 numpy의 sum 함수를 접하면 axis 파라미터 때문에 굉장히 어렵게 느껴집니다. axis를 기준으로 합을 계산하는 의미를 이해하기 어렵습니다. 이제부터 numpy의 sum 함수에서 axis가 무엇을 의미하는지 알아보겠습니다.
numpy의 sum 함수 사용 예 다음 코드는 3차원 배열을 만들고, 3차원 배열의 합을 구하는 코드입니다.</description>
    </item>
    
  </channel>
</rss>